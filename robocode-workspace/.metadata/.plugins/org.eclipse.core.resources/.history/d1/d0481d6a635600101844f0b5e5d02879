package com.robotanks.listener;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Dictionary;

import net.sf.robocode.io.Logger;
import net.sf.robocode.peer.DebugProperty;
import net.sf.robocode.peer.ExecCommands;
import net.sf.robocode.serialization.IXmlSerializable;
import net.sf.robocode.serialization.XmlWriter;
import net.sf.robocode.ui.IWindowManager;
import net.sf.robocode.ui.IWindowManagerExt;
import net.sf.robocode.ui.WindowManager;
import robocode.control.events.BattleAdaptor;
import robocode.control.events.BattleCompletedEvent;
import robocode.control.events.BattleErrorEvent;
import robocode.control.events.BattleFinishedEvent;
import robocode.control.events.BattleMessageEvent;
import robocode.control.events.BattlePausedEvent;
import robocode.control.events.BattleResumedEvent;
import robocode.control.events.BattleStartedEvent;
import robocode.control.events.RoundEndedEvent;
import robocode.control.events.RoundStartedEvent;
import robocode.control.events.TurnEndedEvent;
import robocode.control.events.TurnStartedEvent;
import robocode.control.snapshot.IBulletSnapshot;
import robocode.control.snapshot.IRobotSnapshot;
import robocode.control.snapshot.ITurnSnapshot;
import net.sf.robocode.battle.snapshot.BulletSnapshot;
import net.sf.robocode.battle.snapshot.RobotSnapshot;
import net.sf.robocode.battle.snapshot.ScoreSnapshot;
import net.sf.robocode.battle.snapshot.TurnSnapshot;


public class BattleListener extends BattleAdaptor {
	private EchoServer server;
	private ITurnSnapshot lastSnapshot;
	
	 public BattleListener() {
		 //windowManager.addBattleListener(this);
		 server = new EchoServer(lastSnapshot);

		 System.out.println("Loaded com.robotanks.listener");

	 }
	 public ITurnSnapshot getTurnSnapshot() {
		 return lastSnapshto;
	 }
	 @Override
	 public void onTurnEnded(final TurnEndedEvent event) {
		 if (event.getTurnSnapshot() == null) {
				//repaint();
			 	//send null snapshot
			} else {
				//update(event.getTurnSnapshot());
				lastSnapshot = event.getTurnSnapshot();		
			}
		}
	 @Override
	 public void onRoundStarted(final RoundStartedEvent event) {
			
		}

	 @Override
		public void onBattleStarted(final BattleStartedEvent event) {
			
		}
@Override
		public void onBattleFinished(final BattleFinishedEvent event) {
			
		}
@Override
		public void onBattleCompleted(final BattleCompletedEvent event) {
			
		}
@Override
		public void onRoundEnded(final RoundEndedEvent event) {
			
		}
@Override
		public void onBattlePaused(final BattlePausedEvent event) {
			
		}
@Override
		public void onBattleResumed(final BattleResumedEvent event) {
			
		}
@Override
		public void onBattleMessage(final BattleMessageEvent event) {
		
		}
@Override
		public void onBattleError(final BattleErrorEvent event) {
			
		}
@Override
		public void onTurnStarted(TurnStartedEvent event) {
			
		}


	
	public class EchoServer {
	    ServerSocket m_ServerSocket;

		public EchoServer(ITurnSnapshot lastSnapshot, BattleListener BL) {
	    	System.out.println("Creating socket");
			try {
				m_ServerSocket = new ServerSocket(1234);
			    Thread ServerThread =new Thread(new ClientServiceThread(m_ServerSocket,lastSnapshot, BattleListener BL));
			    ServerThread.setDaemon(true);
			    ServerThread.start();
			} catch (Exception e) {
				e.printStackTrace();
			}
		  }

		class ClientServiceThread implements Runnable {
			  Socket clientSocket;
			  ServerSocket serverSocket;
			  ITurnSnapshot lastSnapshot;
			  int clientID = 0;
			  boolean running = true;
	
			  ClientServiceThread(ServerSocket s, ITurnSnapshot ls, BattleListener BL) {
				  serverSocket=s;
				  lastSnapshot = ls;
			  }
	
			  public void run() {
			      try {
					while(true) {
						System.out.println("Server socket waiting connection");

						clientSocket = serverSocket.accept();

						System.out.println("Accepted Client : ID - " + clientID + " : Address - " + clientSocket.getInetAddress().getHostName());
						
						running=true;
							
				      BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
				      PrintWriter out = new PrintWriter(new OutputStreamWriter(clientSocket.getOutputStream()));

				      while (running) {
				    	  lastSnapshot = BL.getSnapshot();
				    	  String text=null;
				    	  if(this.lastSnapshot!=null) {
				    		 /* 
				    		  try {
				    		  
				    		  final StringWriter writer = new StringWriter();
				    		  final XmlWriter xmlWriter = new XmlWriter(writer, true);
				    		  
				    		  writer.startElement("turn"); {
				    				writer.writeAttribute("round", round);
				    				writer.writeAttribute("turn", turn);
				    				writer.writeAttribute("ver", serialVersionUID);

				    				writer.startElement("robots"); {
				    					for (IRobotSnapshot r : robots) {
				    						((RobotSnapshot) r).writeXml(writer, options);
				    					}
				    				}
				    				writer.endElement();

				    				writer.startElement("bullets"); {
				    					for (IBulletSnapshot b : bullets) {
				    						((BulletSnapshot) b).writeXml(writer, options);
				    					}
				    				}
				    				writer.endElement();
				    			}
				    			writer.endElement();
				    	  
						text = writer.toString();

				    	  } catch (IOException e) {
								Logger.logError(e);
							}
				    	  }
				    	
					*/
								
								final StringWriter writer = new StringWriter();
								final XmlWriter xmlWriter = new XmlWriter(writer, true);
		
								try {
									((IXmlSerializable) this.lastSnapshot).writeXml(xmlWriter, null);
									writer.close();
								} catch (IOException e) {
									Logger.logError(e);
								}
								text = writer.toString();
								System.out.println("Processed snapshot");
							}
				    	  
				       String clientCommand = in.readLine();
				       System.out.println("Client Says :" + clientCommand);
				       
				        if (clientCommand==null || clientCommand.equalsIgnoreCase("quit")) {
				          running = false;
				        } else {
				          out.println(text);
				          out.flush();
				        }
				      }
						System.out.println("Stopping client thread for client : " + clientID);
						
			      }
			    } catch (Exception e) {
			      e.printStackTrace();
			    }
			  }
			}
		}
}